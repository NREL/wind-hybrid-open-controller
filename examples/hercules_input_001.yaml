# Input YAML for emy_python

# Name
name: example_000

###
# Describe this emulator setup
description: Just a solar plant

simulation_dt: 0.5 

hercules_comms:

  amr_wind:

    wind_farm_0:
      type: amr_wind_local #options are amr_wind or amr_wind_local
      amr_wind_input_file: amr_input.inp
      yaw_simulator_name: yaw_system_0 # can also use "none" (without quotes)

  helics:

    config:
        name: hercules # What is the purpose of this name
        use_dash_frontend: False
        KAFKA: False
        KAFKA_topics: EMUV1py
        helics: 
            # deltat: 1 # This will be assigned in software
            subscription_topics: [status]
            publication_topics: [control]
            endpoints: []
            helicsport : 23405
        publication_interval: 1
        endpoint_interval: 1
        starttime: 0
        stoptime: 388,800 
        
        Agent: ControlCenter

py_sims:

  solar_farm_0: # The name of py_sim object 1

    py_sim_type: SimpleSolar
    capacity: 50 # MW
    efficiency: 0.5 #Fraction

    initial_conditions:

      power: 25 # MW
      irradiance: 1000

controller:
  # chain_cd_dt_15_n_horizon_24_n_wind_preview_samples_7_nu_0.001_
  controller_type: SimpleYawController # This may not be needed
  num_turbines: 9 # Should match AMR-Wind! Ideally, would come from AMR-wind
  initial_conditions:
      yaw: auto # degrees (same for all turbines) (will this work?)
  yaw_limits: [-30, 30] # degrees
  yaw_rate: 0.3 # degrees/sec
  rated_turbine_power: 5000000.0 # W TODO get from floris input file
  yaw_increment: 0.05 # degrees
  lpf_start_time: 180.0 # seconds
  lpf_time_const: 35 # sec
  deadband_thr: 8 # degrees
  controller_dt: 15 # sec
  n_horizon: 24
  alpha: 0.999 # WARNING: if you choose this to be small and set the initial values of the control inputs to 0, solver may get stuck at initial solution
  control_input_domain: continuous
  wind_preview_type: stochastic_interval_elliptical # wind preview type assumed in MPC: persistent (assumes that current freestream measurements will stay constant over horizon), stochastic_interval, stochastic_sample (sample from Gaussian model of preview), perfect (preview known)
  stochastic_sample_u_scale: 1.0
  max_std_dev: 2.0 # for wind_preview_intervals, +/- number of standard deviations from mean to select sample intervals from
  n_wind_preview_samples: 11
  warm_start: greedy # may equal 'previous' to warm-start with time-shifted previous solution,  "lut" to warm-start with lookup table solution, or "random" #TODO
  use_lut_filtered_wind_dir: True
  lut_path: "../../examples/inputs/lut_9.csv"
  generate_lut: False
  nu: 0.0001 # 0.00138 step size to add/subtract from yaw angles for stochastic gradient estimate
  use_filtered_wind_dir: True
  floris_input_file: ../../examples/mpc_wake_steering_florisstandin/floris_gch_9.yaml
  solver: slsqp # may equal serial_refine, slsqp, sequential_slsqp, or zsgd
  basin_hop: False
  offline_probability: 0.0
  state_con_type: extreme # extreme or check_all_samples
  beta: 0.9
  max_iter: 100
  acc: 0.000001
  use_state_cons: True
  use_dyn_state_cons: True
  diff_type: direct_cd
  use_norm_power: True
  decay_const: 60 # yaw offset at which decay should ~ zero, must be greater than yaw_limits given above and up to 90deg
  decay_type: exp
  decay_all: False
  clip_value: 30 # yaw offset at which to clip values fed to FLORIS, up to 44
  controller_class: GreedyController
  wind_forecast_class: False
  uncertain: False
  target_turbine_indices:

wind_forecast:
  context_timedelta: 1200 # seconds
  prediction_timedelta: 1200 # seconds
  SVRForecast:
    kernel: rbf
    C: 1.0
    degree: 3
    gamma: auto
    epsilon: 0.1
    cache_size: 200
    n_neighboring_turbines: 3
    max_n_samples:
  MLForecast:
    model_key: informer
    model_checkpoint: latest